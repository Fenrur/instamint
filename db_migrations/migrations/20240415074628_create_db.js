exports.up = async (knex) => {
  await knex.schema
    .createTable("profiles", (table) => {
      table.increments("id")
      table.string("username", "18").unique().notNullable()
      table.timestamp("created_at", { useTz: false }).defaultTo(knex.fn.now(3)).notNullable()
      table.string("bio").notNullable().defaultTo("")
      table.string("link")
      table.string("avatar_url").notNullable()
      table.boolean("can_be_searched").notNullable().defaultTo(true)
      table.text("visibility_type").notNullable().defaultTo("public")
      table.text("location")
      table.string("display_name", "26").notNullable()
    })
    .createTable("users", (table) => {
      table.increments("id")
      table.string("email").notNullable().unique()
      table.uuid("uid").notNullable().unique().defaultTo(knex.fn.uuid())
      table.string("ashed_password").notNullable()
      table.boolean("is_activated").notNullable().defaultTo(false)
      table.boolean("two_factor_enabled").notNullable().defaultTo(false)
      table.string("two_factor_secret")
      table.string("phone_number", "20")
      table.enu("language_type", ["en", "fr", "es"]).notNullable().defaultTo("en")
      table.enu("role", ["user", "admin"]).notNullable().defaultTo("user")
      table.integer("profile_id").unsigned().notNullable()
      table
        .foreign("profile_id")
        .references("id")
        .inTable("profiles")
        .onDelete("CASCADE")
      table.text("enabled_notification_type")
    })
    .createTable("teabags", (table) => {
      table.increments("id")
      table.integer("profile_id").unsigned().notNullable()
      table
        .foreign("profile_id")
        .references("id")
        .inTable("profiles")
        .onDelete("CASCADE")
    })
    .createTable("nfts", (table) => {
      table.increments("id")
      table.integer("owner_user_id").unsigned().notNullable()
      table
        .foreign("owner_user_id")
        .references("id")
        .inTable("users")
        .onDelete("CASCADE")
      table.integer("show_on_profile_id").unsigned().notNullable()
      table
        .foreign("show_on_profile_id")
        .references("id")
        .inTable("profiles")
        .onDelete("CASCADE")
      table.text("description").notNullable()
      table.text("location").notNullable()
      table.double("price", "precision").notNullable()
      table.enu("currency_type", ["usd", "eur", "eth", "sol"]).notNullable()
    })
    .createTable("mints", (table) => {
      table.increments("id")
      table.integer("nft_id").unsigned().notNullable()
      table
        .foreign("nft_id")
        .references("id")
        .inTable("nfts")
        .onDelete("CASCADE")
      table.integer("user_id").unsigned().notNullable()
      table
        .foreign("user_id")
        .references("id")
        .inTable("users")
        .onDelete("CASCADE")
      table.timestamp("mint_at", { useTz: false }).defaultTo(knex.fn.now(3)).notNullable()
    })
    .createTable("hashtag_nfts", (table) => {
      table.increments("id")
      table.string("hashtag").notNullable()
      table.integer("nft_id").unsigned().notNullable()
      table
        .foreign("nft_id")
        .references("id")
        .inTable("nfts")
        .onDelete("CASCADE")
    })
    .createTable("comments", (table) => {
      table.increments("id")
      table.integer("nft_id").unsigned().notNullable()
      table
        .foreign("nft_id")
        .references("id")
        .inTable("nfts")
        .onDelete("CASCADE")
      table.integer("user_id").unsigned().notNullable()
      table
        .foreign("user_id")
        .references("id")
        .inTable("users")
        .onDelete("CASCADE")
      table.timestamp("commented_at", { useTz: false }).defaultTo(knex.fn.now(3)).notNullable()
      table.string("commentary", "1000").notNullable()
      table.integer("reply_comment_id").unsigned().notNullable()
      table
        .foreign("reply_comment_id")
        .references("id")
        .inTable("comments")
        .onDelete("CASCADE")
    })
    .createTable("report_comments", (table) => {
      table.increments("id")
      table.integer("reporter_user_id").unsigned().notNullable()
      table
        .foreign("reporter_user_id")
        .references("id")
        .inTable("users")
        .onDelete("CASCADE")
      table.integer("reported_comment_id").unsigned().notNullable()
      table
        .foreign("reported_comment_id")
        .references("id")
        .inTable("comments")
        .onDelete("CASCADE")
      table.string("reason", "1000")
      table.timestamp("report_at", { useTz: false }).defaultTo(knex.fn.now(3)).notNullable()
    })
    .createTable("report_nfts", (table) => {
      table.increments("id")
      table.integer("reporter_user_id").unsigned().notNullable()
      table
        .foreign("reporter_user_id")
        .references("id")
        .inTable("users")
        .onDelete("CASCADE")
      table.integer("reported_nft_id").unsigned().notNullable()
      table
        .foreign("reported_nft_id")
        .references("id")
        .inTable("nfts")
        .onDelete("CASCADE")
      table.string("reason", "1000")
      table.timestamp("report_at", { useTz: false }).defaultTo(knex.fn.now(3)).notNullable()
    })
    .createTable("report_users", (table) => {
      table.increments("id")
      table.integer("reporter_user_id").unsigned().notNullable()
      table
        .foreign("reporter_user_id")
        .references("id")
        .inTable("users")
        .onDelete("CASCADE")
      table.integer("reported_user_id").unsigned().notNullable()
      table
        .foreign("reported_user_id")
        .references("id")
        .inTable("users")
        .onDelete("CASCADE")
      table.string("reason", "1000")
      table.timestamp("report_at", { useTz: true }).defaultTo(knex.fn.now(3)).notNullable()
    })
    .createTable("white_lists", (table) => {
      table.increments("id")
      table.timestamp("start_at", { useTz: false }).defaultTo(knex.fn.now(3)).notNullable()
      table.timestamp("end_at", { useTz: false }).defaultTo(knex.fn.now(3)).notNullable()
      table.integer("teabag_id").unsigned().notNullable()
      table
        .foreign("teabag_id")
        .references("id")
        .inTable("teabags")
        .onDelete("CASCADE")
    })
    .createTable("view_profiles", (table) => {
      table.increments("id")
      table.integer("viewer_user_id").unsigned().notNullable()
      table
        .foreign("viewer_user_id")
        .references("id")
        .inTable("users")
        .onDelete("CASCADE")
      table.integer("viewed_profile_id").unsigned().notNullable()
      table
        .foreign("viewed_profile_id")
        .references("id")
        .inTable("users")
        .onDelete("CASCADE")
      table.timestamp("view_at", { useTz: false }).defaultTo(knex.fn.now(3)).notNullable()
    })
    .createTable("schedule_deletion_users", (table) => {
      table.increments("id")
      table.integer("user_id").unsigned().notNullable()
      table
        .foreign("user_id")
        .references("id")
        .inTable("users")
        .onDelete("CASCADE")
      table.timestamp("schedule_at", { useTz: true }).defaultTo(knex.fn.now(3)).notNullable()
      table.integer("by_user_id").unsigned().notNullable()
      table
        .foreign("by_user_id")
        .references("id")
        .inTable("schedule_deletion_users")
        .onDelete("CASCADE")
      table.string("reason", "1000")
    })
    .createTable("draft_nfts", (table) => {
      table.increments("id")
      table.text("description")
      table.integer("owner_id").unsigned().notNullable()
      table
        .foreign("owner_id")
        .references("id")
        .inTable("users")
        .onDelete("CASCADE")
      table.string("hashtags").notNullable()
      table.text("location").notNullable()
    })
    .createTable("white_list_users", (table) => {
      table.increments("id")
      table.integer("white_list_id").unsigned().notNullable()
      table
        .foreign("white_list_id")
        .references("id")
        .inTable("white_lists")
        .onDelete("CASCADE")
      table.integer("white_listed_user_id").unsigned().notNullable()
      table
        .foreign("white_listed_user_id")
        .references("id")
        .inTable("users")
        .onDelete("CASCADE")
    })
    .createTable("view_nfts", (table) => {
      table.increments("id")
      table.integer("user_id").unsigned().notNullable()
      table
        .foreign("user_id")
        .references("id")
        .inTable("users")
        .onDelete("CASCADE")
      table.integer("nft_id").unsigned().notNullable()
      table
        .foreign("nft_id")
        .references("id")
        .inTable("nfts")
        .onDelete("CASCADE")
      table.timestamp("view_at", { useTz: false }).defaultTo(knex.fn.now(3)).notNullable()
    })
    .createTable("user_teabags", (table) => {
      table.increments("id")
      table.integer("user_id").unsigned().notNullable()
      table
        .foreign("user_id")
        .references("id")
        .inTable("users")
        .onDelete("CASCADE")
      table.integer("teabag_id").unsigned().notNullable()
      table
        .foreign("teabag_id")
        .references("id")
        .inTable("teabags")
        .onDelete("CASCADE")
      table.enu("role", ["user", "admin"]).notNullable().defaultTo("user")
    })
    .createTable("private_messages", (table) => {
      table.increments("id")
      table.integer("from_user_id").unsigned().notNullable()
      table
        .foreign("from_user_id")
        .references("id")
        .inTable("users")
        .onDelete("CASCADE")
      table.integer("to_user_id").unsigned().notNullable()
      table
        .foreign("to_user_id")
        .references("id")
        .inTable("users")
        .onDelete("CASCADE")
      table.string("message", "1000").notNullable()
      table.integer("reply_private_message_id").unsigned()
      table
        .foreign("reply_private_message_id")
        .references("id")
        .inTable("private_messages")
        .onDelete("CASCADE")
    })
    .createTable("follows", (table) => {
      table.increments("id")
      table.integer("follower_user_id").unsigned()
      table
        .foreign("follower_user_id")
        .references("id")
        .inTable("users")
        .onDelete("CASCADE")
      table.integer("followed_user_id").unsigned()
      table
        .foreign("followed_user_id")
        .references("id")
        .inTable("users")
        .onDelete("CASCADE")
      table.timestamp("follow_at", { useTz: false }).defaultTo(knex.fn.now(3)).notNullable()
    })
    .createTable("password_resets", (table) => {
      table.increments("id")
      table.uuid("reset_id").notNullable().unique().defaultTo(knex.fn.uuid())
      table.integer("user_id").unsigned()
      table
        .foreign("user_id")
        .references("id")
        .inTable("users")
        .onDelete("CASCADE")
      table.timestamp("created_at", { useTz: false }).defaultTo(knex.fn.now(3)).notNullable()
      table.timestamp("expire_at", { useTz: false }).defaultTo(knex.fn.now(3)).notNullable()
      table.boolean("active").notNullable()
    })
    .createTable("request_follows", (table) => {
      table.increments("id")
      table.integer("request_user_id").unsigned()
      table
        .foreign("request_user_id")
        .references("id")
        .inTable("users")
        .onDelete("CASCADE")
      table.integer("requested_user_id").unsigned()
      table
        .foreign("requested_user_id")
        .references("id")
        .inTable("users")
        .onDelete("CASCADE")
      table.timestamp("request_at", { useTz: false }).defaultTo(knex.fn.now(3)).notNullable()
      table.boolean("is_ignored").notNullable().defaultTo(false)
    })
}

exports.down  = async (knex) => {
  await knex.schema
    .dropTable("request_follows")
    .dropTable("password_resets")
    .dropTable("follows")
    .dropTable("private_messages")
    .dropTable("user_teabags")
    .dropTable("view_nfts")
    .dropTable("white_list_users")
    .dropTable("draft_nfts")
    .dropTable("schedule_deletion_users")
    .dropTable("view_profiles")
    .dropTable("white_lists")
    .dropTable("report_users")
    .dropTable("report_nfts")
    .dropTable("report_comments")
    .dropTable("comments")
    .dropTable("hashtag_nfts")
    .dropTable("mints")
    .dropTable("nfts")
    .dropTable("teabags")
    .dropTable("users")
    .dropTable("profiles")
}
